import { supabase } from "../supabase";

type JobAssignment = {
  id?: number; // Optional, will be auto-generated by Supabase if not provided
  breakdowns_id: string | null;
  technician_id: string | null;
  accepted: boolean | null;
  notes: string | null;
  result_images: string[] | null;
  completed_at: Date | null;
  location: string | null;
  emergency_type: string | null;
  description: string;
  created_at: Date | null;
  status: 'pending' | 'assigned' | 'inprogress' | 'awaiting-approval' | 'approved' | 'completed' | 'cancelled' | 'Breakdown Request' | 'Breakdown assigned' | 'Technician accepted' | 'Technician on site' | 'Technician working' | 'Tow requested';
  created_by: string | null;
  job_allocated?: number | null;
  vehicle_id?: number | null;
  attachments?: string[] | null;
  driver_id?: number | null;
};

type driverJobAssignment = {
  id?: number;
  first_name: string;
  surname: string;
  id_number: string;
  email: string;
  cell_number: string;
  job_allocated?: number | null;
  created_at: Date | null;
};


type VehicleAssignment = {
  id?: number; // Optional, will be auto-generated by Supabase if not provided
  registration_number: string;
  make: string | null;
  model: string | null;
};

export async function addEmergency({ jobAssignment }: { jobAssignment: JobAssignment }) {
  if (!jobAssignment || !jobAssignment.created_by) {
    console.error("Invalid job assignment data:", jobAssignment);
    return { success: false, error: "Invalid job assignment data" };
  }
  // JOB-2025-034
  const year = new Date().setFullYear(new Date().getFullYear() + 1).toString().slice(0, 4);
  const job_id = "JOB-" + year + "-" + Math.floor(Math.random() * 1000).toString().padStart(3, "0");
  console.log("Generated job ID:", job_id);
  const { data, error } = await supabase.from('job_assignments')
    .insert({
      id: jobAssignment.id || undefined, // Use undefined to let Supabase auto-generate the ID
      breakdowns_id: jobAssignment.breakdowns_id,
      technician_id: jobAssignment.technician_id,
      description: jobAssignment.description,
      accepted: jobAssignment.accepted,
      notes: jobAssignment.notes,
      result_images: jobAssignment.result_images,
      completed_at: jobAssignment.completed_at,
      location: jobAssignment.location,
      status: "Breakdown Request",
      job_id: job_id,
      emergency_type: jobAssignment.emergency_type,
      created_at: jobAssignment.created_at,
      created_by: jobAssignment.created_by,
      job_allocated: jobAssignment.job_allocated || undefined, // Use optional chaining in case jobAssignment is undefined
      vehicle_id: jobAssignment.vehicle_id || undefined,
      attachments: jobAssignment.attachments || null, // Use optional chaining in case jobAssignment is undefined
      driver_id: jobAssignment.driver_id

      // Use optional chaining in case jobAssignment
    })
    .select();

  if (error) {
    console.error("Error inserting job assignment:", error);
    return { success: false, error: error.message };
  }

  console.log("Job assignment inserted successfully:", data);
  return { success: true, data };
}


// upsert job assignment
// export async function getVehicleAndDrivers({ Jobassignment }: { Jobassignment: { id: number } }) {
//   const { data: Driver } = await supabase.auth.getUser();
//   const user_id = Driver.user?.id;

//   const { data, error } = await supabase
//     .from('drivers')
//     .upsert(
//       {
//         job_allocated: Jobassignment.id
//       }
//     )
//     .eq('user_id', user_id)
//     .select();
//   if (error) {
//     console.error("Error fetching vehicle drivers:", error);
//     return { success: false, error: error.message };
//   }

//   console.log("Vehicle drivers fetched successfully:", data);
//   if (!data || data.length === 0) {
//     console.warn("No drivers found for the given job assignment.");
//     return { success: false, error: "No drivers found for the given job assignment." };
//   }
//   return { success: true, data };
// }


// export async function getVehicleAndDrivers({ Jobassignment }: { Jobassignment: { id: number } }) {
//   const { data: Driver } = await supabase.auth.getUser();
//   const user_id = Driver.user?.id;

//   const { data, error } = await supabase
//     .from('driver')
//     .update({ job_allocated: Jobassignment.id }) // only update this field
//     .eq('user_id', user_id)
//     .select(); // üëà returns updated row(s)

//   if (error) {
//     console.error("Error updating job_allocated:", error);
//     return { success: false, error: error.message };
//   }

//   console.log("Driver job allocation updated successfully:", data);

//   return { success: true, data };
// }


export async function getVehicleAndDrivers({ Jobassignment }: { Jobassignment: { id: number } }) {
  const { data: authUser } = await supabase.auth.getUser();
  const user_id = authUser?.user?.id;

  if (!user_id) {
    console.error("No user ID found");
    return { success: false, error: "User not found" };
  }

  const { data: driverData } = await supabase
    .from("drivers")
    .select("id")
    .eq("user_id", user_id || "")
    .maybeSingle();
  console.log("üîç Found driver record:", driverData);

  if (!driverData) {
    console.error("No driver found with this user_id");
    return { success: false, error: "Driver not found" };
  }

  const { data, error } = await supabase
    .from("drivers")
    .select("id")
    .eq("id", driverData.id)
    .single();

  console.log("üÜï Incoming job_assignment.id:", Jobassignment.id);
  console.log("üöó Driver ID:", driverData.id);
  console.log("Current user ID:", user_id);
  console.log("Data to be updated:", data);

  if (error) {
    console.error("Error updating job_allocated:", error);
    return { success: false, error: error.message };
  }

  console.log("Job allocated updated successfully:", data);
  return { success: true, data };
}

export async function getVehicleAssignId({ Jobassignment }: { Jobassignment: { id: number } }, registrationNumber: string) {
  const { data, error } = await supabase
    .from('vehiclesc')
    .select("*")
    .eq("registration_number", registrationNumber)
    .single();

  const { data: vehicleData, error: vehicleError } = await supabase
    .from("vehiclesc")
    .select("id")
    .eq("registration_number", registrationNumber)
    .single();

  if (error) {
    console.error("Error fetching vehicle assignment ID:", error);
    return { success: false, error: error.message };
  }

  if (!data || !data.id) {
    console.warn("No vehicle assignment ID found.");
    return { success: false, error: "No vehicle assignment ID found." };
  }

  console.log("Vehicle assignment ID fetched successfully:", data.id);
  return { success: true, id: data.id };
}


export async function checkCarReg({ registrationNumber }: { registrationNumber: string }) {
  const { data, error } = await supabase
    .from("vehiclesc")
    .select("*")
    .eq("registration_number", registrationNumber)
    .limit(1)
    .select();

  if (error) {
    console.error("Error fetching vehicle registration:", error);
    return { success: false, error: error.message };
  }

  if (!data || data.length === 0) {
    console.warn("No vehicle registration found.");
    return { success: false, error: "No vehicle registration found." };
  }


  console.log("Vehicle registration fetched successfully:", data);
  return { success: true, data };
}